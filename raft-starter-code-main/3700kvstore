#!/usr/bin/env python3

import argparse, socket, time, json, select, struct, sys, math, os, random

BROADCAST = "FFFF"
#not sure if states can be openly strings, 
states = ["FOLLOWER", "CANDIDATE", "LEADER"]
statemachine = {}

class ReplicaStateModel:
    def __intit__(self):
        self.state = "FOLLOWER"
        self.term = 0
        self.log = []

#somehow creates multiple replicas, and then connects to the server and then the others can interact with them
class Replica:
    def __init__(self, port, id, others):
        self.port = port
        self.id = id
        self.others = others
        #upon startup all replicas should be followers
        self.state = states[0]
        self.term = 0
        self.transactionlog = []
        self.votedFor = None
        self.currentLeader = BROADCAST
        self.votes = 0
        #transaction log, kv store(which will have all the information)

        #suppose get request, have to talk to kv store
        #request, foward to current leader, and do raft operations, then it commits, and commits to its own state machine
        #or return response

        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.socket.bind(('localhost', 0))

        #just sends the initial start message to the other replicas, 
        
        #for some reason setting the first timeout to be within the run doesn't work, so I guess upon initialization, 
        # we can just hold the election?
        #then after we established the leader then we can then so the socket select to then wait for messages?

        timeout = time.time() + random.uniform(.2, 3)
        while time.time() < timeout:
            continue
        print(self.id + " timeout: " + str(timeout))
        self.electionProcess()

    def send(self, message):
        self.socket.sendto(json.dumps(message).encode('utf-8'), ('localhost', self.port))



    def run(self):
        while True:
            #if(self.state == "LEADER"):
            #    EmptyMessage = {"src": self.id, "dst": replica , "leader": self.id, "type": "empty"}
            #   self.send(EmptyMessage)

            socket = [self.socket]
            #currenttime = time.time()
            #print("time before select?" + str(currenttime))
            socks = select.select(socket, [], [], 1.0)[0]
            #print("time after select?" + str(currenttime))

            #trying to get this thing to only execute once,
            #the goal is once we use select for this socket and nothing returns, i.e the list is emtpy then we should hold 
            #an election,
            for conn in socks:
                #timerecognzied = time.time() - currenttime
                #if we have not heard anything within the time, then we have timed out, and there needs to be a new election
                #print("this socket triggered before its timeout: " + str(timerecognzied))
                data, addr = conn.recvfrom(65535)
                msg = data.decode('utf-8')
                print("Received message '%s'" % (msg,), flush=True)
                self.processRequest(msg)    
            #self.electionProcess()

    def processRequest(self, msg):
        msg = json.loads(msg)

        if(msg["type"] == "put"):
            self.doPutRequest(msg)
        if(msg["type"] == "get"):
            self.doGetRequest(msg)
        if(msg['type'] == "voting"):
            self.voteLeader(msg)
        if(msg['type'] == "goodvote"):
            self.votes += 1
            if(self.votes >= 3):
                self.state = states[2]
                #once we reach a majority broadcast an empty append message to other machines, for now just updates
                for replica in self.others:
                    newLeaderMessage = {"src": self.id, "dst": replica , "leader": self.id, "type": "update"}
                    self.currentLeader = self.id
                    self.state = states[2]
                    self.send(newLeaderMessage)

        if(msg['type'] == "update"):
            self.currentLeader = msg["leader"]            

    def doPutRequest(self, msg):
        hdst = msg['src']
        mid = msg['MID']
        leader = msg["leader"]

        if(leader != self.currentLeader):
            redirectmessage = {"src": self.id, "dst": hdst,  "leader": self.currentLeader, "type": "redirect", "MID": mid}
            self.send(redirectmessage)

        if(leader == self.currentLeader):
            #after redirected to the leader, have to forward the command onto the other replicas and do the actual raft stuff
            location = (msg['key'], msg['value'])
            cmd = ("put", location)
            self.transactionlog.append((cmd, self.term))

            #send to replicas, and wait for their response
            for replica in self.others:
                AppendMessage = {"src": self.id, "dst": replica,  "leader": self.currentLeader, "type": "appendEntry", "key": msg['key'], "value": msg['value']}
                self.send(AppendMessage)

            #after reaching quorom, then ratify message, 
            statemachine[msg['key']] = msg['value']
            okmessage = {"src": self.id, "dst": hdst,  "leader": self.currentLeader, "type": "ok", "MID": mid}
            self.send(okmessage)


        #failmessage = {"src": self.id, "dst": hdst,  "leader": BROADCAST, "type": "fail", "MID": mid}  
        #self.send(failmessage)

    def doGetRequest(self,msg):
        hdst = msg['src']
        mid = msg['MID']
        leader = msg["leader"]

        if(leader != self.currentLeader):
            redirectmessage = {"src": self.id, "dst": hdst,  "leader": self.currentLeader, "type": "redirect", "MID": mid}
            self.send(redirectmessage)

        if(leader == self.currentLeader):
            #not sure If I need to keep track of this in the actual transaction log, since it doens't modify anything

            #send to replicas, and wait for their response I guess, this probably deals with select
            key = msg['key']
            value = statemachine[key]
            okmessage = {"src": self.id, "dst": hdst,  "leader": self.currentLeader, "type": "ok", "MID": mid, "value": value}
            self.send(okmessage)


    #TODO
    #for some reason with my initial election process, they always vote for themselves, and if I limit that to only one vote
    #they only vote once and don't vote for others, so need to fix this, it only works now because of the term condition check
    def electionProcess(self):
        #increase the term amount for a new process
        newterm = self.term + 1
        #set the state into candidate
        self.state = states[1]
        #for each replica relay the message and the new term number, and tell themt that we want to request a vote for a leader.
        for replica in self.others:
            RequestVote = {"src": self.id, "dst": replica, "leader": self.currentLeader, "type": "voting", "newterm": newterm, "votedfor" : self.id}
            self.send(RequestVote)   
            self.votedFor = self.id

    def voteLeader(self, msg):
        term  = msg['newterm']
        #if the replica recognizes that the term is greater than what we have, then we need to be a follower and accept that term
        if(term > self.term):
            print(self.id + " voted")
            self.votedFor = msg['src']
            GoodVote = {"src": self.id, "dst": msg["src"], "leader": self.currentLeader, "type": "goodvote", "votedfor" : self.votedFor}
            self.send(GoodVote)
            self.state = states[0]
            self.term = term

        #handle the other possibilties i,e if we have an already better log and someone tries to send that request, should stop that vote etc,
        #     

        #eventaully do log checking later.
        #like make sure taht we don't set a leader to be one with a really stale log    



if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='run a key-value store')
    parser.add_argument('port', type=int, help="Port number to communicate")
    parser.add_argument('id', type=str, help="ID of this replica")
    parser.add_argument('others', metavar='others', type=str, nargs='+', help="IDs of other replicas")
    args = parser.parse_args()
    replica = Replica(args.port, args.id, args.others)
    replica.run()
